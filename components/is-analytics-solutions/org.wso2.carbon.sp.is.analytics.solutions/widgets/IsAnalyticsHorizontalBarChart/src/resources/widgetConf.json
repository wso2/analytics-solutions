{
  "name": "IS Analytics Horizontal Bar Chart",
  "id": "IsAnalyticsHorizontalBarChart",
  "thumbnailURL": "",
  "configs": {
    "pubsub": {
      "types": [
        "subscriber",
        "publisher"
      ],
      "publisherWidgetOutputs":[
        "header",
        "body"
      ]
    },
    "options": [
      {
        "id": "widgetType",
        "title": "Widget Type",
        "type": {
          "name": "ENUM",
          "possibleValues": [
            "Local",
            "Federated",
            "Overall"
          ]
        },
        "defaultValue": "Overall"
      },
      {
        "id": "xAxis",
        "title": "X Axis",
        "type": {
          "name": "ENUM",
          "possibleValues": [
            "Service Provider",
            "User Store Domain",
            "Role",
            "Identity Provider",
            "Username"
          ]
        },
        "defaultValue": "Username"
      }
    ],
    "providerConfig": {
      "configs": {
        "type": "SiddhiStoreDataProvider",
        "config": {
          "siddhiApp": "@App:name(\"IS_AUTHENTICATION_AGGREGATIONS\") @App:description(\"Handle Event from IS and save data in a table for Overall Authentication\") define stream ProcessedAuthenticationDataStream ( meta_tenantId int, eventId string, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, successValue int, failureValue int, stepSuccessValue int, firstLoginValue int, identityProviderType string, timestamp long ); define stream PerUserRolesDuplicateEventStream ( meta_tenantId int, eventId string, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, successValue int, failureValue int, stepSuccessValue int, firstLoginValue int, identityProviderType string, timestamp long, token string ); @store(type='rdbms', datasource='IS_ANALYTICS_DB') @purge(enable='true', interval='60 min', @retentionPeriod(sec='1 day', min='72 hours', hours='90 days', days='1 year', months='2 years', years='3 years')) @index('meta_tenantId', 'username', 'identityProviderType', 'identityProvider', 'userStoreDomain', 'serviceProvider', 'region') define aggregation RoleAggregation from PerUserRolesDuplicateEventStream select meta_tenantId, username, serviceProvider, identityProvider, token as role, remoteIp, region, userStoreDomain, isFirstLogin, sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, sum(firstLoginValue) as authFirstSuccessCount, identityProviderType, timestamp group by meta_tenantId, username, serviceProvider, token aggregate by timestamp every second ... year; @store(type='rdbms', datasource='IS_ANALYTICS_DB') @purge(enable='true', interval='60 min', @retentionPeriod(sec='1 day', min='72 hours', hours='90 days', days='1 year', months='2 years', years='3 years')) @index('meta_tenantId', 'username', 'identityProviderType', 'identityProvider', 'userStoreDomain', 'serviceProvider', 'region') define aggregation AuthenticationStatAggregation from ProcessedAuthenticationDataStream select meta_tenantId, username, localUsername, rolesCommaSeparated, serviceProvider, identityProvider, remoteIp, region, userStoreDomain, isFirstLogin, sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, sum(firstLoginValue) as authFirstSuccessCount, identityProviderType, timestamp group by meta_tenantId, username, localUsername, remoteIp, rolesCommaSeparated aggregate by timestamp every second ... year; from ProcessedAuthenticationDataStream#str:tokenize(rolesCommaSeparated, ',') insert into PerUserRolesDuplicateEventStream;",
          "queryData": {
            "query": "from {{AggregationName}} {{filterCondition}} within {{from}}L, {{to}}L per \"{{per}}s\" select {{xAxisValue}}, sum({{yAxisValue}}) as {{yAxisValue}} group by {{xAxisValue}} having {{yAxisValue}} > 0"
          },
          "publishingInterval": 60
        }
      }
    }
  }
}


